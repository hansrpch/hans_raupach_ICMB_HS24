{
  "hash": "68db40075d12680e18657fcb391ffdbe",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Assignment 2\"\nauthor: \"Hans Raupach\"\n---\n\n\n\n\n**1. Create normal distribution**\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nN <- 5000 # 5000 actors in the population\nMU <- 100 # mean wealth = 100\ndis <- rnorm(N, mean = MU, sd = MU/5)\n```\n:::\n\n\n\n\n**2. Calculate Gini coefficient**\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngini <- function(dis) {\n  y <- sort(dis)  # sortiere die Verteilung\n  n <- length(y)  # Anzahl der Beobachtungen\n  numer <- sum((2 * (1:n) - n - 1) * y)\n  denom <- n * sum(y)\n  gini <- numer / denom  # Gini-Koeffizient\n  return(gini)\n}\n```\n:::\n\n\n\n\n**3. Create a histogram of the initial distribution**\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(dis, xlab = \"wealth\", ylab = \"count\", breaks = 30, xlim = c(0, 200))\n```\n\n::: {.cell-output-display}\n![](hw2_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\n\n**4. Create transaction function: random split (ChatGPT supported)**\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrandom_split <- function(A, B) {\n  # Gesamtbetrag im Topf\n  pot <- A + B\n  \n  # Zufällige Aufteilung des Topfes\n  share <- runif(1, 0, pot) # 1 Zufallszahl erzeugen, 0 = Minimum, pot = Maximum\n  \n  # Rückgabe der beiden Anteile\n  return(c(share, pot - share))\n}\nrandom_split(100, 100)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]   1.437338 198.562662\n```\n\n\n:::\n:::\n\n\n\n\n**5. Create interaction function (ChatGPT supported)**\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nanyone <- function(N) {\n  return(sample(1:N, 2))  # Nimmt 2 zufällige, eindeutige Zahlen aus 1 bis N\n}\n\n# My initial idea: sample(length(y), 2) # random sample from the distribution (index number)\n```\n:::\n\n\n\n\n**6. Simulation (with ChatGPT)**\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstep <- function(dis, transaction = random_split, interaction = anyone) {\n  # Zwei zufällige Individuen auswählen\n  indices <- interaction(length(dis))\n  i <- indices[1]\n  j <- indices[2]\n  \n  # Transaktion durchführen und neue Verteilung speichern\n  dis[c(i, j)] <- transaction(dis[i], dis[j])\n  \n  return(dis)\n}\n\nsimulate <- function(dis, T, step_function = step, transaction = random_split, interaction = anyone) {\n  populations <- list(dis)  # Kopie der Population zu Beginn\n  \n  # Schleife für T Schritte\n  for (t in seq_len(T)) {\n    dis <- step_function(dis, transaction, interaction)\n    populations[[t + 1]] <- dis  # Speichert die Population nach jedem Schritt\n  }\n  \n  return(populations)\n}\n\n\nT <- 10000  # Anzahl der Schritte\nresult <- simulate(dis, T)\n\ngini_over_time <- sapply(result, gini)\n```\n:::\n\n\n\n\n**7. Plot of changing Gini coefficient (with ChatGPT)**\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plot des Gini-Koeffizienten über die Zeit\nplot(gini_over_time, type = \"l\", xlab = \"Time\", ylab = \"Gini Coefficient\", main = \"Gini over Time\")\n```\n\n::: {.cell-output-display}\n![](hw2_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n\n**8. Plot of resulting distribution (with ChatGPT)**\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfinal_distribution <- result[[T + 1]]  # Verteilung nach T Schritten\nhist(final_distribution, xlab = \"wealth\", ylab = \"count\", breaks = 30, xlim = c(0, 500))\n```\n\n::: {.cell-output-display}\n![](hw2_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}